{"version":3,"file":"static/js/140.fad3d5a1.chunk.js","mappings":"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","sources":["components/RouteMap.js","pages/RouteView.js","utils/kmlParser.js","utils/indexedDB.js"],"sourcesContent":["import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { MapContainer, TileLayer, Polyline, Marker, Popup, useMap, useMapEvents } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport '../styles/RouteMap.css';\nimport PropTypes from 'prop-types';\nimport { useGeolocation } from '../context/GeolocationContext';\n\nconst customIcon = new L.Icon({\n  iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n  iconSize: [25, 41],\n  iconAnchor: [12, 41],\n  popupAnchor: [1, -34],\n  shadowSize: [41, 41]\n});\n\nfunction BoundsAdjuster({ bounds }) {\n  const map = useMap();\n  React.useEffect(() => {\n    if (bounds) {\n      map.fitBounds(bounds);\n    }\n  }, [map, bounds]);\n  return null;\n}\n\nfunction FullscreenControl({ isFullscreen, toggleFullscreen }) {\n  const map = useMapEvents({});\n\n  useEffect(() => {\n    if (isFullscreen) {\n      map.invalidateSize();\n    }\n  }, [isFullscreen, map]);\n\n  return (\n    <div className=\"leaflet-top leaflet-right\">\n      <div className=\"leaflet-control leaflet-bar\">\n        <button \n          onClick={toggleFullscreen}\n          title={isFullscreen ? \"Exit Fullscreen\" : \"Enter Fullscreen\"}\n          className=\"fullscreen-button\"\n          aria-label={isFullscreen ? \"Exit Fullscreen\" : \"Enter Fullscreen\"}\n        >\n          {isFullscreen ? (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <path d=\"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3\"/>\n            </svg>\n          ) : (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <path d=\"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3\"/>\n            </svg>\n          )}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction GeolocationControls({ getLocation, isTracking, toggleTracking }) {\n  return (\n    <div className=\"leaflet-bottom leaflet-left\">\n      <div className=\"leaflet-control leaflet-bar geolocation-controls\">\n        <button onClick={getLocation}>Определить местоположение</button>\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={isTracking}\n            onChange={toggleTracking}\n          />\n          Отслеживать местоположение\n        </label>\n      </div>\n    </div>\n  );\n}\n\nfunction RouteMap({ route, isOffline }) {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const { position, lastKnownPosition, heading, isTracking, getLocation, toggleTracking } = useGeolocation();\n\n  const toggleFullscreen = useCallback(() => {\n    setIsFullscreen(prev => !prev);\n  }, []);\n\n  const { bounds, routeLines, routePoints } = useMemo(() => {\n    if (!route || (!route.lines && !route.points)) {\n      return { bounds: null, routeLines: [], routePoints: [] };\n    }\n\n    const allCoordinates = [\n      ...(route.lines ? route.lines.flat() : []),\n      ...(route.points ? route.points.map(point => point.coordinates) : [])\n    ];\n\n    let bounds = L.latLngBounds(allCoordinates.map(([lon, lat]) => [lat, lon]));\n\n    if (position) {\n      bounds.extend([position.latitude, position.longitude]);\n    } else if (lastKnownPosition) {\n      bounds.extend([lastKnownPosition.latitude, lastKnownPosition.longitude]);\n    }\n\n    return {\n      bounds,\n      routeLines: route.lines || [],\n      routePoints: route.points || []\n    };\n  }, [route, position, lastKnownPosition]);\n\n  if (!bounds) return null;\n\n  const createArrowIcon = (color) => L.divIcon({\n    className: 'location-arrow',\n    html: `<div style=\"transform: rotate(${heading || 0}deg); color: ${color}; font-size: 16px;\">➤</div>`,\n    iconSize: [24, 24],\n    iconAnchor: [12, 12],\n  });\n\n  const redArrowIcon = createArrowIcon('red');\n  const blackArrowIcon = createArrowIcon('black');\n\n  const center = bounds.getCenter();\n\n  return (\n    <div className={`map-container ${isFullscreen ? 'fullscreen' : ''}`}>\n      <MapContainer center={center} zoom={12} style={{ height: '100%', width: '100%' }}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {routeLines.map((line, index) => (\n          <Polyline\n            key={`line-${index}`}\n            positions={line.map(([lon, lat]) => [lat, lon])}\n            color=\"blue\"\n          />\n        ))}\n        {routePoints.map((point, index) => (\n          <Marker\n            key={`point-${index}`}\n            position={[point.coordinates[1], point.coordinates[0]]}\n            icon={customIcon}\n          >\n            <Popup>\n              <strong>{point.name}</strong>\n              {point.description && <p>{point.description}</p>}\n            </Popup>\n          </Marker>\n        ))}\n        {isTracking && position && (\n          <Marker position={[position.latitude, position.longitude]} icon={redArrowIcon}>\n            <Popup>Вы здесь (активное отслеживание)</Popup>\n          </Marker>\n        )}\n        {!isTracking && lastKnownPosition && (\n          <Marker position={[lastKnownPosition.latitude, lastKnownPosition.longitude]} icon={blackArrowIcon}>\n            <Popup>Последнее известное местоположение</Popup>\n          </Marker>\n        )}\n        <BoundsAdjuster bounds={bounds} />\n        <FullscreenControl isFullscreen={isFullscreen} toggleFullscreen={toggleFullscreen} />\n        <GeolocationControls getLocation={getLocation} isTracking={isTracking} toggleTracking={toggleTracking} />\n      </MapContainer>\n      <div \n        className=\"map-overlay\"\n        style={{\n          position: 'absolute',\n          bottom: 0,\n          right: 220,\n          backgroundColor: 'white',\n          padding: '0 5px',\n          fontSize: '12px',\n          zIndex: 1000\n        }}\n      >\n        🇷🇺\n      </div>\n      {isOffline && (\n        <div \n          className=\"map-overlay\"\n          style={{\n            position: 'absolute',\n            top: 10,\n            left: 10,\n            backgroundColor: 'rgba(255, 255, 255, 0.8)',\n            padding: '5px 10px',\n            borderRadius: '5px',\n            zIndex: 1000\n          }}\n        >\n          Офлайн-режим: карта может быть неполной\n        </div>\n      )}\n    </div>\n  );\n}\n\nRouteMap.propTypes = {\n  route: PropTypes.shape({\n    lines: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n    points: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      description: PropTypes.string,\n      coordinates: PropTypes.arrayOf(PropTypes.number)\n    }))\n  }),\n  isOffline: PropTypes.bool\n};\n\nexport default RouteMap;","import React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport RouteMap from '../components/RouteMap';\nimport { getRoute, saveRoute, getRouteVersion } from '../utils/indexedDB';\nimport { parseKml, extractRouteFromGeoJSON } from '../utils/kmlParser';\n\nfunction RouteView() {\n  const { id } = useParams();\n  const [route, setRoute] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isOffline, setIsOffline] = useState(!navigator.onLine);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const handleOnline = () => setIsOffline(false);\n    const handleOffline = () => setIsOffline(true);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  useEffect(() => {\n    document.body.classList.toggle('fullscreen-active', isFullscreen);\n  }, [isFullscreen]);\n\n  useEffect(() => {\n    async function loadRoute() {\n      try {\n        setLoading(true);\n        let routeData = await getRoute(id);\n\n        if (!routeData || !isOffline) {\n          const response = await fetch(`${process.env.PUBLIC_URL}/data/routes/index.json`);\n          const routesInfo = await response.json();\n          const routeInfo = routesInfo.find(r => r.id === id);\n\n          if (!routeInfo) {\n            throw new Error('Route info not found');\n          }\n\n          let localVersion = await getRouteVersion(id).catch(() => null);\n          \n          if (localVersion !== routeInfo.version) {\n            const kmlResponse = await fetch(`${process.env.PUBLIC_URL}/data/routes/${id}.kml`);\n            const kmlBlob = await kmlResponse.blob();\n            const geojson = await parseKml(new File([kmlBlob], `${id}.kml`));\n            routeData = extractRouteFromGeoJSON(geojson);\n            \n            routeData.id = id;\n            routeData.version = routeInfo.version;\n            \n            await saveRoute(routeData).catch(console.error);\n          } else if (!routeData) {\n            routeData = await getRoute(id);\n          }\n        }\n        \n        setRoute(routeData);\n      } catch (error) {\n        console.error(`Error loading route ${id}:`, error);\n        setError(`Ошибка загрузки маршрута: ${error.message}`);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    loadRoute();\n  }, [id, isOffline]);\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!route) return <div>No route data available</div>;\n\n  const safeRender = (content) => {\n    if (typeof content === 'string') {\n      return content;\n    } else if (content && typeof content === 'object') {\n      if (content['@type'] === 'html' && content.value) {\n        return <div dangerouslySetInnerHTML={{ __html: content.value }} />;\n      } else {\n        return JSON.stringify(content);\n      }\n    }\n    return '';\n  };\n\n  return (\n    <div className={isFullscreen ? 'fullscreen-view' : ''}>\n      {!isFullscreen && <h1>{safeRender(route.name)}</h1>}\n      {!isFullscreen && safeRender(route.description)}\n      <RouteMap \n        route={route} \n        isOffline={isOffline} \n        isFullscreen={isFullscreen}\n        setIsFullscreen={setIsFullscreen}\n      />\n      {!isFullscreen && <Link to=\"/catalog\">Назад к каталогу</Link>}\n      {isOffline && !isFullscreen && <div>Вы находитесь в офлайн-режиме. Некоторые функции могут быть недоступны.</div>}\n    </div>\n  );\n}\n\nexport default RouteView;","import { kml } from '@tmcw/togeojson';\n\nexport async function parseKml(file) {\n  const kmlText = await file.text();\n  console.log('Raw KML content:', kmlText.substring(0, 500) + '...');  // Log first 500 characters\n  \n  const parser = new DOMParser();\n  const kmlDom = parser.parseFromString(kmlText, 'text/xml');\n  \n  if (kmlDom.getElementsByTagName('parsererror').length > 0) {\n    console.error('XML parsing error:', kmlDom.getElementsByTagName('parsererror')[0].textContent);\n    throw new Error('Failed to parse KML file');\n  }\n  \n  const geojson = kml(kmlDom);\n  console.log('Parsed GeoJSON:', JSON.stringify(geojson, null, 2));\n  \n  return geojson;\n}\n\nexport function extractRouteFromGeoJSON(geojson) {\n  console.log('Extracting route from GeoJSON:', JSON.stringify(geojson, null, 2));\n\n  const route = {\n    name: '',\n    description: '',\n    lines: [],\n    points: []\n  };\n\n  if (geojson.type === 'FeatureCollection') {\n    geojson.features.forEach(feature => {\n      if (feature.geometry.type === 'Point') {\n        route.points.push({\n          name: feature.properties.name || '',\n          description: feature.properties.description || '',\n          coordinates: feature.geometry.coordinates\n        });\n      } else if (feature.geometry.type === 'LineString') {\n        route.lines.push(feature.geometry.coordinates);\n      } else if (feature.geometry.type === 'MultiGeometry' || feature.geometry.type === 'GeometryCollection') {\n        feature.geometry.geometries.forEach(geometry => {\n          if (geometry.type === 'LineString') {\n            route.lines.push(geometry.coordinates);\n          }\n        });\n      }\n    });\n\n    // Extracting route name and description\n    const documentFeature = geojson.features.find(f => f.properties.name && f.properties.description);\n    if (documentFeature) {\n      route.name = documentFeature.properties.name;\n      route.description = documentFeature.properties.description;\n    }\n  }\n\n  console.log('Extracted route data:', route);\n  return route;\n}","const DB_NAME = 'BikeRoutesDB';\nconst STORE_NAME = 'routes';\nconst CATALOG_STORE = 'catalog';\n\nexport function openDB() {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, 8);\n    \n    request.onerror = (event) => {\n      console.error(\"Database error: \" + event.target.error);\n      reject(\"Error opening DB: \" + event.target.error);\n    };\n    \n    request.onsuccess = (event) => {\n      resolve(event.target.result);\n    };\n    \n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n      if (!db.objectStoreNames.contains(STORE_NAME)) {\n        const store = db.createObjectStore(STORE_NAME, { keyPath: 'id' });\n        store.createIndex('version', 'version', { unique: false });\n      }\n      if (!db.objectStoreNames.contains(CATALOG_STORE)) {\n        db.createObjectStore(CATALOG_STORE, { keyPath: 'id' });\n      }\n    };\n  });\n}\n\nexport function saveRoute(route) {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(STORE_NAME, 'readwrite');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.put(route);\n      \n      request.onerror = () => reject(\"Error saving route\");\n      request.onsuccess = () => resolve();\n    }).catch(reject);\n  });\n}\n\nexport function getRoute(id) {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(STORE_NAME, 'readonly');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.get(id);\n      \n      request.onerror = () => reject(\"Error getting route\");\n      request.onsuccess = () => resolve(request.result);\n    }).catch(reject);\n  });\n}\n\nexport function getRouteVersion(id) {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(STORE_NAME, 'readonly');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.get(id);\n      \n      request.onerror = () => reject(\"Error getting route version\");\n      request.onsuccess = () => resolve(request.result ? request.result.version : null);\n    }).catch(reject);\n  });\n}\n\nexport function saveCatalog(catalog) {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(CATALOG_STORE, 'readwrite');\n      const store = transaction.objectStore(CATALOG_STORE);\n      const request = store.put({ id: 'main', data: catalog });\n      \n      request.onerror = () => reject(\"Error saving catalog\");\n      request.onsuccess = () => resolve();\n    }).catch(reject);\n  });\n}\n\nexport function getCatalog() {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(CATALOG_STORE, 'readonly');\n      const store = transaction.objectStore(CATALOG_STORE);\n      const request = store.get('main');\n      \n      request.onerror = () => reject(\"Error getting catalog\");\n      request.onsuccess = () => resolve(request.result ? request.result.data : null);\n    }).catch(reject);\n  });\n}"],"names":["customIcon","L","iconUrl","shadowUrl","iconSize","iconAnchor","popupAnchor","shadowSize","BoundsAdjuster","_ref","bounds","map","useMap","React","fitBounds","FullscreenControl","_ref2","isFullscreen","toggleFullscreen","useMapEvents","useEffect","invalidateSize","_jsx","className","children","onClick","title","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","GeolocationControls","_ref3","getLocation","isTracking","toggleTracking","_jsxs","type","checked","onChange","_ref4","route","isOffline","setIsFullscreen","useState","position","lastKnownPosition","heading","useGeolocation","useCallback","prev","routeLines","routePoints","useMemo","lines","points","allCoordinates","flat","point","coordinates","_ref5","lon","lat","extend","latitude","longitude","createArrowIcon","color","html","concat","redArrowIcon","blackArrowIcon","center","getCenter","MapContainer","zoom","style","TileLayer","url","attribution","line","index","Polyline","positions","_ref6","Marker","icon","Popup","name","description","bottom","right","backgroundColor","padding","fontSize","zIndex","top","left","borderRadius","id","useParams","setRoute","error","setError","loading","setLoading","setIsOffline","navigator","onLine","handleOnline","handleOffline","window","addEventListener","removeEventListener","document","body","classList","toggle","async","routeData","getRoute","response","fetch","process","routeInfo","json","find","r","Error","getRouteVersion","catch","version","kmlResponse","kmlBlob","blob","geojson","console","log","JSON","stringify","features","forEach","feature","geometry","push","properties","geometries","documentFeature","f","extractRouteFromGeoJSON","file","kmlText","text","substring","kmlDom","DOMParser","parseFromString","getElementsByTagName","length","textContent","kml","parseKml","File","saveRoute","message","loadRoute","safeRender","content","value","dangerouslySetInnerHTML","__html","RouteMap","Link","to","DB_NAME","STORE_NAME","CATALOG_STORE","openDB","Promise","resolve","reject","request","indexedDB","open","onerror","event","target","onsuccess","result","onupgradeneeded","db","objectStoreNames","contains","createObjectStore","keyPath","createIndex","unique","then","transaction","objectStore","put","get","saveCatalog","catalog","data","getCatalog"],"sourceRoot":""}