{"version":3,"file":"static/js/237.fd818b26.chunk.js","mappings":"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","sources":["components/RouteMap.js","components/UserLocation.js","pages/RouteView.js","utils/kmlParser.js","utils/indexedDB.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { MapContainer, TileLayer, Polyline, Marker, Popup, useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport '../styles/RouteMap.css';\nimport PropTypes from 'prop-types';\n\nconst customIcon = new L.Icon({\n  iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n  iconSize: [25, 41],\n  iconAnchor: [12, 41],\n  popupAnchor: [1, -34],\n  shadowSize: [41, 41]\n});\n\nfunction BoundsAdjuster({ bounds }) {\n  const map = useMap();\n  React.useEffect(() => {\n    if (bounds) {\n      map.fitBounds(bounds);\n    }\n  }, [map, bounds]);\n  return null;\n}\n\nfunction RouteMap({ route, position, heading, isOffline }) {\n  const { bounds, routeLines, routePoints } = useMemo(() => {\n    if (!route || (!route.lines && !route.points)) {\n      return { bounds: null, routeLines: [], routePoints: [] };\n    }\n\n    const allCoordinates = [\n      ...(route.lines ? route.lines.flat() : []),\n      ...(route.points ? route.points.map(point => point.coordinates) : [])\n    ];\n\n    let bounds = L.latLngBounds(allCoordinates.map(([lon, lat]) => [lat, lon]));\n\n    if (position) {\n      bounds.extend([position.latitude, position.longitude]);\n    }\n\n    return {\n      bounds,\n      routeLines: route.lines || [],\n      routePoints: route.points || []\n    };\n  }, [route, position]);\n\n  if (!bounds) return null;\n\n  const arrowIcon = L.divIcon({\n    className: 'location-arrow',\n    html: `<div style=\"transform: rotate(${heading || 0}deg); color: red; font-size: 16px;\">➤</div>`,\n    iconSize: [24, 24],\n    iconAnchor: [12, 12],\n  });\n\n  const center = bounds.getCenter();\n\n  return (\n    <div style={{ position: 'relative', height: '400px', width: '100%' }}>\n      <MapContainer center={center} zoom={12} style={{ height: '100%', width: '100%' }}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {routeLines.map((line, index) => (\n          <Polyline\n            key={`line-${index}`}\n            positions={line.map(([lon, lat]) => [lat, lon])}\n            color=\"blue\"\n          />\n        ))}\n        {routePoints.map((point, index) => (\n          <Marker\n            key={`point-${index}`}\n            position={[point.coordinates[1], point.coordinates[0]]}\n            icon={customIcon}\n          >\n            <Popup>\n              <strong>{point.name}</strong>\n              {point.description && <p>{point.description}</p>}\n            </Popup>\n          </Marker>\n        ))}\n        {position && (\n          <Marker position={[position.latitude, position.longitude]} icon={arrowIcon}>\n            <Popup>Вы здесь</Popup>\n          </Marker>\n        )}\n        <BoundsAdjuster bounds={bounds} />\n      </MapContainer>\n      <div \n        style={{\n          position: 'absolute',\n          bottom: 0,\n          right: 220,\n          backgroundColor: 'white',\n          padding: '0 5px',\n          fontSize: '12px',\n          zIndex: 1000\n        }}\n      >\n        🇷🇺\n      </div>\n      {isOffline && (\n        <div \n          style={{\n            position: 'absolute',\n            top: 10,\n            left: 10,\n            backgroundColor: 'rgba(255, 255, 255, 0.8)',\n            padding: '5px 10px',\n            borderRadius: '5px',\n            zIndex: 1000\n          }}\n        >\n          Офлайн-режим: карта может быть неполной\n        </div>\n      )}\n    </div>\n  );\n}\n\nRouteMap.propTypes = {\n  route: PropTypes.shape({\n    lines: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n    points: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      description: PropTypes.string,\n      coordinates: PropTypes.arrayOf(PropTypes.number)\n    }))\n  }),\n  position: PropTypes.shape({\n    latitude: PropTypes.number,\n    longitude: PropTypes.number\n  }),\n  heading: PropTypes.number,\n  isOffline: PropTypes.bool\n};\n\nexport default RouteMap;","import React from 'react';\nimport { useGeolocation } from '../context/GeolocationContext';\n\nfunction UserLocation() {\n  const { position, heading, error } = useGeolocation();\n\n  if (error) {\n    return <div>Ошибка геолокации: {error}</div>;\n  }\n\n  if (!position) {\n    return <div>Определение местоположения...</div>;\n  }\n\n  return (\n    <div>\n      <h2>Ваше местоположение:</h2>\n      <p>Широта: {position.latitude.toFixed(6)}</p>\n      <p>Долгота: {position.longitude.toFixed(6)}</p>\n      {heading !== null && <p>Направление: {heading.toFixed(2)}°</p>}\n    </div>\n  );\n}\n\nexport default UserLocation;","import React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport RouteMap from '../components/RouteMap';\nimport UserLocation from '../components/UserLocation';\nimport { getRoute, saveRoute, getRouteVersion } from '../utils/indexedDB';\nimport { useGeolocation } from '../context/GeolocationContext';\nimport { parseKml, extractRouteFromGeoJSON } from '../utils/kmlParser';\n\nfunction RouteView() {\n  const { id } = useParams();\n  const [route, setRoute] = useState(null);\n  const { position, heading } = useGeolocation();\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isOffline, setIsOffline] = useState(!navigator.onLine);\n\n  useEffect(() => {\n    const handleOnline = () => setIsOffline(false);\n    const handleOffline = () => setIsOffline(true);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  useEffect(() => {\n    async function loadRoute() {\n      try {\n        setLoading(true);\n        let routeData = await getRoute(id);\n\n        if (!routeData || !isOffline) {\n          const response = await fetch(`${process.env.PUBLIC_URL}/data/routes/index.json`);\n          const routesInfo = await response.json();\n          const routeInfo = routesInfo.find(r => r.id === id);\n\n          if (!routeInfo) {\n            throw new Error('Route info not found');\n          }\n\n          let localVersion = await getRouteVersion(id).catch(() => null);\n          \n          if (localVersion !== routeInfo.version) {\n            const kmlResponse = await fetch(`${process.env.PUBLIC_URL}/data/routes/${id}.kml`);\n            const kmlBlob = await kmlResponse.blob();\n            const geojson = await parseKml(new File([kmlBlob], `${id}.kml`));\n            routeData = extractRouteFromGeoJSON(geojson);\n            \n            routeData.id = id;\n            routeData.version = routeInfo.version;\n            \n            await saveRoute(routeData).catch(console.error);\n          } else if (!routeData) {\n            routeData = await getRoute(id);\n          }\n        }\n        \n        setRoute(routeData);\n      } catch (error) {\n        console.error(`Error loading route ${id}:`, error);\n        setError(`Ошибка загрузки маршрута: ${error.message}`);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    loadRoute();\n  }, [id, isOffline]);\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!route) return <div>No route data available</div>;\n\n  const safeRender = (content) => {\n    if (typeof content === 'string') {\n      return content;\n    } else if (content && typeof content === 'object') {\n      if (content['@type'] === 'html' && content.value) {\n        return <div dangerouslySetInnerHTML={{ __html: content.value }} />;\n      } else {\n        return JSON.stringify(content);\n      }\n    }\n    return '';\n  };\n\n  return (\n    <div>\n      <h1>{safeRender(route.name)}</h1>\n      {safeRender(route.description)}\n      <UserLocation />\n      <RouteMap route={route} position={position} heading={heading} isOffline={isOffline} />\n      <Link to=\"/catalog\">Назад к каталогу</Link>\n      {isOffline && <div>Вы находитесь в офлайн-режиме. Некоторые функции могут быть недоступны.</div>}\n    </div>\n  );\n}\n\nexport default RouteView;","import { kml } from '@tmcw/togeojson';\n\nexport async function parseKml(file) {\n  const kmlText = await file.text();\n  console.log('Raw KML content:', kmlText.substring(0, 500) + '...');  // Log first 500 characters\n  \n  const parser = new DOMParser();\n  const kmlDom = parser.parseFromString(kmlText, 'text/xml');\n  \n  if (kmlDom.getElementsByTagName('parsererror').length > 0) {\n    console.error('XML parsing error:', kmlDom.getElementsByTagName('parsererror')[0].textContent);\n    throw new Error('Failed to parse KML file');\n  }\n  \n  const geojson = kml(kmlDom);\n  console.log('Parsed GeoJSON:', JSON.stringify(geojson, null, 2));\n  \n  return geojson;\n}\n\nexport function extractRouteFromGeoJSON(geojson) {\n  console.log('Extracting route from GeoJSON:', JSON.stringify(geojson, null, 2));\n\n  const route = {\n    name: '',\n    description: '',\n    lines: [],\n    points: []\n  };\n\n  if (geojson.type === 'FeatureCollection') {\n    geojson.features.forEach(feature => {\n      if (feature.geometry.type === 'Point') {\n        route.points.push({\n          name: feature.properties.name || '',\n          description: feature.properties.description || '',\n          coordinates: feature.geometry.coordinates\n        });\n      } else if (feature.geometry.type === 'LineString') {\n        route.lines.push(feature.geometry.coordinates);\n      } else if (feature.geometry.type === 'MultiGeometry' || feature.geometry.type === 'GeometryCollection') {\n        feature.geometry.geometries.forEach(geometry => {\n          if (geometry.type === 'LineString') {\n            route.lines.push(geometry.coordinates);\n          }\n        });\n      }\n    });\n\n    // Extracting route name and description\n    const documentFeature = geojson.features.find(f => f.properties.name && f.properties.description);\n    if (documentFeature) {\n      route.name = documentFeature.properties.name;\n      route.description = documentFeature.properties.description;\n    }\n  }\n\n  console.log('Extracted route data:', route);\n  return route;\n}","const DB_NAME = 'BikeRoutesDB';\nconst STORE_NAME = 'routes';\nconst CATALOG_STORE = 'catalog';\n\nexport function openDB() {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, 8);\n    \n    request.onerror = (event) => {\n      console.error(\"Database error: \" + event.target.error);\n      reject(\"Error opening DB: \" + event.target.error);\n    };\n    \n    request.onsuccess = (event) => {\n      resolve(event.target.result);\n    };\n    \n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n      if (!db.objectStoreNames.contains(STORE_NAME)) {\n        const store = db.createObjectStore(STORE_NAME, { keyPath: 'id' });\n        store.createIndex('version', 'version', { unique: false });\n      }\n      if (!db.objectStoreNames.contains(CATALOG_STORE)) {\n        db.createObjectStore(CATALOG_STORE, { keyPath: 'id' });\n      }\n    };\n  });\n}\n\nexport function saveRoute(route) {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(STORE_NAME, 'readwrite');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.put(route);\n      \n      request.onerror = () => reject(\"Error saving route\");\n      request.onsuccess = () => resolve();\n    }).catch(reject);\n  });\n}\n\nexport function getRoute(id) {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(STORE_NAME, 'readonly');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.get(id);\n      \n      request.onerror = () => reject(\"Error getting route\");\n      request.onsuccess = () => resolve(request.result);\n    }).catch(reject);\n  });\n}\n\nexport function getRouteVersion(id) {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(STORE_NAME, 'readonly');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.get(id);\n      \n      request.onerror = () => reject(\"Error getting route version\");\n      request.onsuccess = () => resolve(request.result ? request.result.version : null);\n    }).catch(reject);\n  });\n}\n\nexport function saveCatalog(catalog) {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(CATALOG_STORE, 'readwrite');\n      const store = transaction.objectStore(CATALOG_STORE);\n      const request = store.put({ id: 'main', data: catalog });\n      \n      request.onerror = () => reject(\"Error saving catalog\");\n      request.onsuccess = () => resolve();\n    }).catch(reject);\n  });\n}\n\nexport function getCatalog() {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(CATALOG_STORE, 'readonly');\n      const store = transaction.objectStore(CATALOG_STORE);\n      const request = store.get('main');\n      \n      request.onerror = () => reject(\"Error getting catalog\");\n      request.onsuccess = () => resolve(request.result ? request.result.data : null);\n    }).catch(reject);\n  });\n}"],"names":["customIcon","L","iconUrl","shadowUrl","iconSize","iconAnchor","popupAnchor","shadowSize","BoundsAdjuster","_ref","bounds","map","useMap","React","fitBounds","_ref2","route","position","heading","isOffline","routeLines","routePoints","useMemo","lines","points","allCoordinates","flat","point","coordinates","_ref3","lon","lat","extend","latitude","longitude","arrowIcon","className","html","concat","center","getCenter","_jsxs","style","height","width","children","MapContainer","zoom","_jsx","TileLayer","url","attribution","line","index","Polyline","positions","_ref4","color","Marker","icon","Popup","name","description","bottom","right","backgroundColor","padding","fontSize","zIndex","top","left","borderRadius","error","useGeolocation","toFixed","id","useParams","setRoute","useState","setError","loading","setLoading","setIsOffline","navigator","onLine","useEffect","handleOnline","handleOffline","window","addEventListener","removeEventListener","async","routeData","getRoute","response","fetch","process","routeInfo","json","find","r","Error","getRouteVersion","catch","version","kmlResponse","kmlBlob","blob","geojson","console","log","JSON","stringify","type","features","forEach","feature","geometry","push","properties","geometries","documentFeature","f","extractRouteFromGeoJSON","file","kmlText","text","substring","kmlDom","DOMParser","parseFromString","getElementsByTagName","length","textContent","kml","parseKml","File","saveRoute","message","loadRoute","safeRender","content","value","dangerouslySetInnerHTML","__html","UserLocation","RouteMap","Link","to","DB_NAME","STORE_NAME","CATALOG_STORE","openDB","Promise","resolve","reject","request","indexedDB","open","onerror","event","target","onsuccess","result","onupgradeneeded","db","objectStoreNames","contains","createObjectStore","keyPath","createIndex","unique","then","transaction","objectStore","put","get","saveCatalog","catalog","data","getCatalog"],"sourceRoot":""}