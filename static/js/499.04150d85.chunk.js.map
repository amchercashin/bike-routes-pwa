{"version":3,"file":"static/js/499.04150d85.chunk.js","mappings":"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","sources":["components/RouteMap.js","utils/mapUtils.js","pages/RouteView.js","utils/kmlParser.js","utils/indexedDB.js"],"sourcesContent":["import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { MapContainer, TileLayer, Polyline, Marker, Popup, useMap, useMapEvents } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport '../styles/RouteMap.css';\nimport PropTypes from 'prop-types';\nimport { useGeolocation } from '../context/GeolocationContext';\nimport { downloadOfflineMap } from '../utils/mapUtils';\n\nconst customIcon = new L.Icon({\n  iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n  iconSize: [25, 41],\n  iconAnchor: [12, 41],\n  popupAnchor: [1, -34],\n  shadowSize: [41, 41]\n});\n\nfunction BoundsAdjuster({ bounds }) {\n  const map = useMap();\n  React.useEffect(() => {\n    if (bounds) {\n      map.fitBounds(bounds);\n    }\n  }, [map, bounds]);\n  return null;\n}\n\nfunction FullscreenControl({ isFullscreen, toggleFullscreen }) {\n  const map = useMapEvents({});\n\n  useEffect(() => {\n    if (isFullscreen) {\n      map.invalidateSize();\n    }\n  }, [isFullscreen, map]);\n\n  return (\n    <div className=\"leaflet-top leaflet-right\">\n      <div className=\"leaflet-control leaflet-bar\">\n        <button \n          onClick={toggleFullscreen}\n          title={isFullscreen ? \"Exit Fullscreen\" : \"Enter Fullscreen\"}\n          className=\"fullscreen-button\"\n          aria-label={isFullscreen ? \"Exit Fullscreen\" : \"Enter Fullscreen\"}\n        >\n          {isFullscreen ? (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <path d=\"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3\"/>\n            </svg>\n          ) : (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <path d=\"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3\"/>\n            </svg>\n          )}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction GeolocationControls({ getLocation, isTracking, toggleTracking }) {\n  return (\n    <div className=\"leaflet-bottom leaflet-left\">\n      <div className=\"leaflet-control leaflet-bar geolocation-controls\">\n        <button onClick={getLocation}>Определить местоположение</button>\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={isTracking}\n            onChange={toggleTracking}\n          />\n          Отслеживать местоположение\n        </label>\n      </div>\n    </div>\n  );\n}\n\nfunction OfflineMapControl({ bounds }) {\n  // const map = useMap();\n  const [isDownloading, setIsDownloading] = useState(false);\n\n  const handleDownload = async () => {\n    setIsDownloading(true);\n    try {\n      await downloadOfflineMap(bounds, 13, 16);\n      alert('Карта успешно загружена для офлайн-использования');\n    } catch (error) {\n      console.error('Ошибка при загрузке офлайн-карты:', error);\n      alert('Произошла ошибка при загрузке карты');\n    } finally {\n      setIsDownloading(false);\n    }\n  };\n\n  return (\n    <div className=\"leaflet-bottom leaflet-left\" style={{ marginBottom: '50px' }}>\n      <div className=\"leaflet-control leaflet-bar\">\n        <button \n          onClick={handleDownload}\n          disabled={isDownloading}\n          className=\"offline-map-button\"\n        >\n          {isDownloading ? 'Загрузка...' : 'Загрузить карту для офлайн-режима'}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction RouteMap({ route, isOffline }) {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const { position, lastKnownPosition, heading, isTracking, getLocation, toggleTracking } = useGeolocation();\n\n  const toggleFullscreen = useCallback(() => {\n    setIsFullscreen(prev => !prev);\n  }, []);\n\n  const { bounds, routeLines, routePoints } = useMemo(() => {\n    if (!route || (!route.lines && !route.points)) {\n      return { bounds: null, routeLines: [], routePoints: [] };\n    }\n\n    const allCoordinates = [\n      ...(route.lines ? route.lines.flat() : []),\n      ...(route.points ? route.points.map(point => point.coordinates) : [])\n    ];\n\n    let bounds = L.latLngBounds(allCoordinates.map(([lon, lat]) => [lat, lon]));\n\n    // if (position) {\n    //   bounds.extend([position.latitude, position.longitude]);\n    // } else if (lastKnownPosition) {\n    //   bounds.extend([lastKnownPosition.latitude, lastKnownPosition.longitude]);\n    // }\n\n    return {\n      bounds,\n      routeLines: route.lines || [],\n      routePoints: route.points || []\n    };\n  }, [route]);\n\n  if (!bounds) return null;\n\n  const createArrowIcon = (color) => L.divIcon({\n    className: 'location-arrow',\n    html: `<div style=\"transform: rotate(${heading || 0}deg); color: ${color}; font-size: 16px;\">➤</div>`,\n    iconSize: [24, 24],\n    iconAnchor: [12, 12],\n  });\n\n  const redArrowIcon = createArrowIcon('red');\n  const blackArrowIcon = createArrowIcon('black');\n\n  const center = bounds.getCenter();\n\n  return (\n    <div className={`map-container ${isFullscreen ? 'fullscreen' : ''}`}>\n      <MapContainer center={center} zoom={12} style={{ height: '100%', width: '100%' }}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {routeLines.map((line, index) => (\n          <Polyline\n            key={`line-${index}`}\n            positions={line.map(([lon, lat]) => [lat, lon])}\n            color=\"blue\"\n          />\n        ))}\n        {routePoints.map((point, index) => (\n          <Marker\n            key={`point-${index}`}\n            position={[point.coordinates[1], point.coordinates[0]]}\n            icon={customIcon}\n          >\n            <Popup>\n              <strong>{point.name}</strong>\n              {point.description && <p>{point.description}</p>}\n            </Popup>\n          </Marker>\n        ))}\n        {isTracking && position && (\n          <Marker position={[position.latitude, position.longitude]} icon={redArrowIcon}>\n            <Popup>Вы здесь (активное отслеживание)</Popup>\n          </Marker>\n        )}\n        {!isTracking && lastKnownPosition && (\n          <Marker position={[lastKnownPosition.latitude, lastKnownPosition.longitude]} icon={blackArrowIcon}>\n            <Popup>Последнее известное местоположение</Popup>\n          </Marker>\n        )}\n        <BoundsAdjuster bounds={bounds} />\n        <FullscreenControl isFullscreen={isFullscreen} toggleFullscreen={toggleFullscreen} />\n        <GeolocationControls getLocation={getLocation} isTracking={isTracking} toggleTracking={toggleTracking} />\n        <OfflineMapControl bounds={bounds} />\n      </MapContainer>\n      <div \n        className=\"map-overlay\"\n        style={{\n          position: 'absolute',\n          bottom: 0,\n          right: 220,\n          backgroundColor: 'white',\n          padding: '0 5px',\n          fontSize: '12px',\n          zIndex: 1000\n        }}\n      >\n        🇷🇺\n      </div>\n      {isOffline && (\n        <div \n          className=\"map-overlay\"\n          style={{\n            position: 'absolute',\n            top: 10,\n            left: 10,\n            backgroundColor: 'rgba(255, 255, 255, 0.8)',\n            padding: '5px 10px',\n            borderRadius: '5px',\n            zIndex: 1000\n          }}\n        >\n          Офлайн-режим: карта может быть неполной\n        </div>\n      )}\n    </div>\n  );\n}\n\nRouteMap.propTypes = {\n  route: PropTypes.shape({\n    lines: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n    points: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      description: PropTypes.string,\n      coordinates: PropTypes.arrayOf(PropTypes.number)\n    }))\n  }),\n  isOffline: PropTypes.bool\n};\n\nexport default RouteMap;","import L from 'leaflet';\n\nexport async function downloadOfflineMap(bounds, minZoom, maxZoom, onProgress) {\n  const bufferInMeters = 500; // 500 метров буфер вокруг маршрута\n  const bufferedBounds = bounds.pad(bufferInMeters / bounds.getCenter().distanceTo(bounds.getNorthWest()));\n\n  const tiles = [];\n  let totalTiles = 0;\n  let loadedTiles = 0;\n\n  for (let z = minZoom; z <= maxZoom; z++) {\n    const northWest = bufferedBounds.getNorthWest();\n    const southEast = bufferedBounds.getSouthEast();\n    const tileBounds = L.bounds(\n      L.CRS.EPSG3857.latLngToPoint(northWest, z),\n      L.CRS.EPSG3857.latLngToPoint(southEast, z)\n    );\n    \n    for (let x = Math.floor(tileBounds.min.x / 256); x < Math.ceil(tileBounds.max.x / 256); x++) {\n      for (let y = Math.floor(tileBounds.min.y / 256); y < Math.ceil(tileBounds.max.y / 256); y++) {\n        const url = `https://tile.openstreetmap.org/${z}/${x}/${y}.png`;\n        tiles.push(url);\n      }\n    }\n  }\n\n  totalTiles = tiles.length;\n\n  const cache = await caches.open('offline-map-tiles');\n  await Promise.all(tiles.map(url => \n    fetch(url)\n      .then(response => cache.put(url, response))\n      .then(() => {\n        loadedTiles++;\n        if (onProgress) {\n          onProgress(loadedTiles / totalTiles);\n        }\n      })\n  ));\n}","import React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport RouteMap from '../components/RouteMap';\nimport { getRoute, saveRoute, getRouteVersion } from '../utils/indexedDB';\nimport { parseKml, extractRouteFromGeoJSON } from '../utils/kmlParser';\n\nfunction RouteView() {\n  const { id } = useParams();\n  const [route, setRoute] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isOffline, setIsOffline] = useState(!navigator.onLine);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const handleOnline = () => setIsOffline(false);\n    const handleOffline = () => setIsOffline(true);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  useEffect(() => {\n    document.body.classList.toggle('fullscreen-active', isFullscreen);\n  }, [isFullscreen]);\n\n  useEffect(() => {\n    async function loadRoute() {\n      try {\n        setLoading(true);\n        let routeData = await getRoute(id);\n\n        if (!routeData || !isOffline) {\n          const response = await fetch(`${process.env.PUBLIC_URL}/data/routes/index.json`);\n          const routesInfo = await response.json();\n          const routeInfo = routesInfo.find(r => r.id === id);\n\n          if (!routeInfo) {\n            throw new Error('Route info not found');\n          }\n\n          let localVersion = await getRouteVersion(id).catch(() => null);\n          \n          if (localVersion !== routeInfo.version) {\n            const kmlResponse = await fetch(`${process.env.PUBLIC_URL}/data/routes/${id}.kml`);\n            const kmlBlob = await kmlResponse.blob();\n            const geojson = await parseKml(new File([kmlBlob], `${id}.kml`));\n            routeData = extractRouteFromGeoJSON(geojson);\n            \n            routeData.id = id;\n            routeData.version = routeInfo.version;\n            \n            await saveRoute(routeData).catch(console.error);\n          } else if (!routeData) {\n            routeData = await getRoute(id);\n          }\n        }\n        \n        setRoute(routeData);\n      } catch (error) {\n        console.error(`Error loading route ${id}:`, error);\n        setError(`Ошибка загрузки маршрута: ${error.message}`);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    loadRoute();\n  }, [id, isOffline]);\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!route) return <div>No route data available</div>;\n\n  const safeRender = (content) => {\n    if (typeof content === 'string') {\n      return content;\n    } else if (content && typeof content === 'object') {\n      if (content['@type'] === 'html' && content.value) {\n        return <div dangerouslySetInnerHTML={{ __html: content.value }} />;\n      } else {\n        return JSON.stringify(content);\n      }\n    }\n    return '';\n  };\n\n  return (\n    <div className={isFullscreen ? 'fullscreen-view' : ''}>\n      {!isFullscreen && <h1>{safeRender(route.name)}</h1>}\n      {!isFullscreen && safeRender(route.description)}\n      <RouteMap \n        route={route} \n        isOffline={isOffline} \n        isFullscreen={isFullscreen}\n        setIsFullscreen={setIsFullscreen}\n      />\n      {!isFullscreen && <Link to=\"/catalog\">Назад к каталогу</Link>}\n      {isOffline && !isFullscreen && <div>Вы находитесь в офлайн-режиме. Некоторые функции могут быть недоступны.</div>}\n    </div>\n  );\n}\n\nexport default RouteView;","import { kml } from '@tmcw/togeojson';\n\nexport async function parseKml(file) {\n  const kmlText = await file.text();\n  console.log('Raw KML content:', kmlText.substring(0, 500) + '...');  // Log first 500 characters\n  \n  const parser = new DOMParser();\n  const kmlDom = parser.parseFromString(kmlText, 'text/xml');\n  \n  if (kmlDom.getElementsByTagName('parsererror').length > 0) {\n    console.error('XML parsing error:', kmlDom.getElementsByTagName('parsererror')[0].textContent);\n    throw new Error('Failed to parse KML file');\n  }\n  \n  const geojson = kml(kmlDom);\n  console.log('Parsed GeoJSON:', JSON.stringify(geojson, null, 2));\n  \n  return geojson;\n}\n\nexport function extractRouteFromGeoJSON(geojson) {\n  console.log('Extracting route from GeoJSON:', JSON.stringify(geojson, null, 2));\n\n  const route = {\n    name: '',\n    description: '',\n    lines: [],\n    points: []\n  };\n\n  if (geojson.type === 'FeatureCollection') {\n    geojson.features.forEach(feature => {\n      if (feature.geometry.type === 'Point') {\n        route.points.push({\n          name: feature.properties.name || '',\n          description: feature.properties.description || '',\n          coordinates: feature.geometry.coordinates\n        });\n      } else if (feature.geometry.type === 'LineString') {\n        route.lines.push(feature.geometry.coordinates);\n      } else if (feature.geometry.type === 'MultiGeometry' || feature.geometry.type === 'GeometryCollection') {\n        feature.geometry.geometries.forEach(geometry => {\n          if (geometry.type === 'LineString') {\n            route.lines.push(geometry.coordinates);\n          }\n        });\n      }\n    });\n\n    // Extracting route name and description\n    const documentFeature = geojson.features.find(f => f.properties.name && f.properties.description);\n    if (documentFeature) {\n      route.name = documentFeature.properties.name;\n      route.description = documentFeature.properties.description;\n    }\n  }\n\n  console.log('Extracted route data:', route);\n  return route;\n}","const DB_NAME = 'BikeRoutesDB';\nconst STORE_NAME = 'routes';\nconst CATALOG_STORE = 'catalog';\n\nexport function openDB() {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, 8);\n    \n    request.onerror = (event) => {\n      console.error(\"Database error: \" + event.target.error);\n      reject(\"Error opening DB: \" + event.target.error);\n    };\n    \n    request.onsuccess = (event) => {\n      resolve(event.target.result);\n    };\n    \n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n      if (!db.objectStoreNames.contains(STORE_NAME)) {\n        const store = db.createObjectStore(STORE_NAME, { keyPath: 'id' });\n        store.createIndex('version', 'version', { unique: false });\n      }\n      if (!db.objectStoreNames.contains(CATALOG_STORE)) {\n        db.createObjectStore(CATALOG_STORE, { keyPath: 'id' });\n      }\n    };\n  });\n}\n\nexport function saveRoute(route) {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(STORE_NAME, 'readwrite');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.put(route);\n      \n      request.onerror = () => reject(\"Error saving route\");\n      request.onsuccess = () => resolve();\n    }).catch(reject);\n  });\n}\n\nexport function getRoute(id) {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(STORE_NAME, 'readonly');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.get(id);\n      \n      request.onerror = () => reject(\"Error getting route\");\n      request.onsuccess = () => resolve(request.result);\n    }).catch(reject);\n  });\n}\n\nexport function getRouteVersion(id) {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(STORE_NAME, 'readonly');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.get(id);\n      \n      request.onerror = () => reject(\"Error getting route version\");\n      request.onsuccess = () => resolve(request.result ? request.result.version : null);\n    }).catch(reject);\n  });\n}\n\nexport function saveCatalog(catalog) {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(CATALOG_STORE, 'readwrite');\n      const store = transaction.objectStore(CATALOG_STORE);\n      const request = store.put({ id: 'main', data: catalog });\n      \n      request.onerror = () => reject(\"Error saving catalog\");\n      request.onsuccess = () => resolve();\n    }).catch(reject);\n  });\n}\n\nexport function getCatalog() {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(CATALOG_STORE, 'readonly');\n      const store = transaction.objectStore(CATALOG_STORE);\n      const request = store.get('main');\n      \n      request.onerror = () => reject(\"Error getting catalog\");\n      request.onsuccess = () => resolve(request.result ? request.result.data : null);\n    }).catch(reject);\n  });\n}"],"names":["customIcon","L","iconUrl","shadowUrl","iconSize","iconAnchor","popupAnchor","shadowSize","BoundsAdjuster","_ref","bounds","map","useMap","React","fitBounds","FullscreenControl","_ref2","isFullscreen","toggleFullscreen","useMapEvents","useEffect","invalidateSize","_jsx","className","children","onClick","title","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","GeolocationControls","_ref3","getLocation","isTracking","toggleTracking","_jsxs","type","checked","onChange","OfflineMapControl","_ref4","isDownloading","setIsDownloading","useState","style","marginBottom","async","minZoom","maxZoom","onProgress","bufferedBounds","pad","getCenter","distanceTo","getNorthWest","tiles","totalTiles","loadedTiles","z","northWest","southEast","getSouthEast","tileBounds","EPSG3857","latLngToPoint","x","Math","floor","min","ceil","max","y","url","concat","push","length","cache","caches","open","Promise","all","fetch","then","response","put","downloadOfflineMap","alert","error","console","disabled","_ref5","route","isOffline","setIsFullscreen","position","lastKnownPosition","heading","useGeolocation","useCallback","prev","routeLines","routePoints","useMemo","lines","points","allCoordinates","flat","point","coordinates","_ref6","lon","lat","createArrowIcon","color","html","redArrowIcon","blackArrowIcon","center","MapContainer","zoom","TileLayer","attribution","line","index","Polyline","positions","_ref7","Marker","icon","Popup","name","description","latitude","longitude","bottom","right","backgroundColor","padding","fontSize","zIndex","top","left","borderRadius","id","useParams","setRoute","setError","loading","setLoading","setIsOffline","navigator","onLine","handleOnline","handleOffline","window","addEventListener","removeEventListener","document","body","classList","toggle","routeData","getRoute","process","routeInfo","json","find","r","Error","getRouteVersion","catch","version","kmlResponse","kmlBlob","blob","geojson","log","JSON","stringify","features","forEach","feature","geometry","properties","geometries","documentFeature","f","extractRouteFromGeoJSON","file","kmlText","text","substring","kmlDom","DOMParser","parseFromString","getElementsByTagName","textContent","kml","parseKml","File","saveRoute","message","loadRoute","safeRender","content","value","dangerouslySetInnerHTML","__html","RouteMap","Link","to","DB_NAME","STORE_NAME","CATALOG_STORE","openDB","resolve","reject","request","indexedDB","onerror","event","target","onsuccess","result","onupgradeneeded","db","objectStoreNames","contains","createObjectStore","keyPath","createIndex","unique","transaction","objectStore","get","saveCatalog","catalog","data","getCatalog"],"sourceRoot":""}