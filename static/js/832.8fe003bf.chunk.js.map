{"version":3,"file":"static/js/832.8fe003bf.chunk.js","mappings":"qLAoEA,QAhEA,WACE,MAAOA,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,OAC5BG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAUK,UAAUC,QAoCtD,OAlCAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAeA,IAAMJ,GAAa,GAClCK,EAAgBA,IAAML,GAAa,GAKzC,OAHAM,OAAOC,iBAAiB,SAAUH,GAClCE,OAAOC,iBAAiB,UAAWF,GAE5B,KACLC,OAAOE,oBAAoB,SAAUJ,GACrCE,OAAOE,oBAAoB,UAAWH,EAAc,CACrD,GACA,KAEHF,EAAAA,EAAAA,YAAU,MACRM,iBACE,IACE,IAAIC,QAAgBC,EAAAA,EAAAA,MAEpB,IAAKD,IAAYX,EAAW,CAC1B,MAAMa,QAAiBC,MAAM,GAADC,OAAIC,mBAAsB,4BACtDL,QAAgBE,EAASI,aACnBC,EAAAA,EAAAA,IAAYP,EACpB,CAEAf,EAAUe,EACZ,CAAE,MAAOb,GACPqB,QAAQrB,MAAM,wBAAyBA,GACvCC,EAAS,yWACX,CACF,CAEAqB,EAAa,GACZ,CAACpB,IAEAF,GACKuB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAK,yCAASxB,MAIrBuB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sGACHtB,IAAauB,EAAAA,EAAAA,KAAA,OAAAD,SAAK,8VACA,IAAlB3B,EAAO6B,QACND,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gHAEHC,EAAAA,EAAAA,KAAA,MAAAD,SACG3B,EAAO8B,KAAIC,IACVL,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAE,UAAAb,OAAYW,EAAMG,IAAKP,SAAEI,EAAMI,QACvCP,EAAAA,EAAAA,KAAA,KAAAD,SAAII,EAAMK,qBAFHL,EAAMG,SAOrBN,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,IAAGN,SAAC,6FAGnB,C,sEClEA,MAAMU,EAAU,eACVC,EAAa,SACbC,EAAgB,UAEf,SAASC,IACd,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAUC,UAAUC,KAAKT,EAAS,GAExCO,EAAQG,QAAWC,IACjBxB,QAAQrB,MAAM,mBAAqB6C,EAAMC,OAAO9C,OAChDwC,EAAO,qBAAuBK,EAAMC,OAAO9C,MAAM,EAGnDyC,EAAQM,UAAaF,IACnBN,EAAQM,EAAMC,OAAOE,OAAO,EAG9BP,EAAQQ,gBAAmBJ,IACzB,MAAMK,EAAKL,EAAMC,OAAOE,OACxB,IAAKE,EAAGC,iBAAiBC,SAASjB,GAAa,CAC/Be,EAAGG,kBAAkBlB,EAAY,CAAEmB,QAAS,OACpDC,YAAY,UAAW,UAAW,CAAEC,QAAQ,GACpD,CACKN,EAAGC,iBAAiBC,SAAShB,IAChCc,EAAGG,kBAAkBjB,EAAe,CAAEkB,QAAS,MACjD,CACD,GAEL,CAEO,SAASG,EAAU7B,GACxB,OAAO,IAAIU,SAAQ,CAACC,EAASC,KAC3BH,IAASqB,MAAKR,IACZ,MAEMT,EAFcS,EAAGS,YAAYxB,EAAY,aACrByB,YAAYzB,GAChB0B,IAAIjC,GAE1Ba,EAAQG,QAAU,IAAMJ,EAAO,sBAC/BC,EAAQM,UAAY,IAAMR,GAAS,IAClCuB,MAAMtB,EAAO,GAEpB,CAEO,SAASuB,EAAShC,GACvB,OAAO,IAAIO,SAAQ,CAACC,EAASC,KAC3BH,IAASqB,MAAKR,IACZ,MAEMT,EAFcS,EAAGS,YAAYxB,EAAY,YACrByB,YAAYzB,GAChB6B,IAAIjC,GAE1BU,EAAQG,QAAU,IAAMJ,EAAO,uBAC/BC,EAAQM,UAAY,IAAMR,EAAQE,EAAQO,OAAO,IAChDc,MAAMtB,EAAO,GAEpB,CAEO,SAASyB,EAAgBlC,GAC9B,OAAO,IAAIO,SAAQ,CAACC,EAASC,KAC3BH,IAASqB,MAAKR,IACZ,MAEMT,EAFcS,EAAGS,YAAYxB,EAAY,YACrByB,YAAYzB,GAChB6B,IAAIjC,GAE1BU,EAAQG,QAAU,IAAMJ,EAAO,+BAC/BC,EAAQM,UAAY,IAAMR,EAAQE,EAAQO,OAASP,EAAQO,OAAOkB,QAAU,KAAK,IAChFJ,MAAMtB,EAAO,GAEpB,CAEO,SAASpB,EAAYP,GAC1B,OAAO,IAAIyB,SAAQ,CAACC,EAASC,KAC3BH,IAASqB,MAAKR,IACZ,MAEMT,EAFcS,EAAGS,YAAYvB,EAAe,aACxBwB,YAAYxB,GAChByB,IAAI,CAAE9B,GAAI,OAAQoC,KAAMtD,IAE9C4B,EAAQG,QAAU,IAAMJ,EAAO,wBAC/BC,EAAQM,UAAY,IAAMR,GAAS,IAClCuB,MAAMtB,EAAO,GAEpB,CAEO,SAAS1B,IACd,OAAO,IAAIwB,SAAQ,CAACC,EAASC,KAC3BH,IAASqB,MAAKR,IACZ,MAEMT,EAFcS,EAAGS,YAAYvB,EAAe,YACxBwB,YAAYxB,GAChB4B,IAAI,QAE1BvB,EAAQG,QAAU,IAAMJ,EAAO,yBAC/BC,EAAQM,UAAY,IAAMR,EAAQE,EAAQO,OAASP,EAAQO,OAAOmB,KAAO,KAAK,IAC7EL,MAAMtB,EAAO,GAEpB,C","sources":["pages/Catalog.js","utils/indexedDB.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getCatalog, saveCatalog } from '../utils/indexedDB';\n\nfunction Catalog() {\n  const [routes, setRoutes] = useState([]);\n  const [error, setError] = useState(null);\n  const [isOffline, setIsOffline] = useState(!navigator.onLine);\n\n  useEffect(() => {\n    const handleOnline = () => setIsOffline(false);\n    const handleOffline = () => setIsOffline(true);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  useEffect(() => {\n    async function loadCatalog() {\n      try {\n        let catalog = await getCatalog();\n\n        if (!catalog || !isOffline) {\n          const response = await fetch(`${process.env.PUBLIC_URL}/data/routes/index.json`);\n          catalog = await response.json();\n          await saveCatalog(catalog);\n        }\n\n        setRoutes(catalog);\n      } catch (error) {\n        console.error('Error loading routes:', error);\n        setError('Не удалось загрузить список маршрутов. Пожалуйста, попробуйте позже.');\n      }\n    }\n\n    loadCatalog();\n  }, [isOffline]);\n\n  if (error) {\n    return <div>Ошибка: {error}</div>;\n  }\n\n  return (\n    <div>\n      <h1>Каталог маршрутов</h1>\n      {isOffline && <div>Вы находитесь в офлайн-режиме. Отображаются сохраненные маршруты.</div>}\n      {routes.length === 0 ? (\n        <p>Загрузка маршрутов...</p>\n      ) : (\n        <ul>\n          {routes.map(route => (\n            <li key={route.id}>\n              <Link to={`/route/${route.id}`}>{route.name}</Link>\n              <p>{route.shortDescription}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      <Link to=\"/\">Назад на главную</Link>\n    </div>\n  );\n}\n\nexport default Catalog;","const DB_NAME = 'BikeRoutesDB';\nconst STORE_NAME = 'routes';\nconst CATALOG_STORE = 'catalog';\n\nexport function openDB() {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, 8);\n    \n    request.onerror = (event) => {\n      console.error(\"Database error: \" + event.target.error);\n      reject(\"Error opening DB: \" + event.target.error);\n    };\n    \n    request.onsuccess = (event) => {\n      resolve(event.target.result);\n    };\n    \n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n      if (!db.objectStoreNames.contains(STORE_NAME)) {\n        const store = db.createObjectStore(STORE_NAME, { keyPath: 'id' });\n        store.createIndex('version', 'version', { unique: false });\n      }\n      if (!db.objectStoreNames.contains(CATALOG_STORE)) {\n        db.createObjectStore(CATALOG_STORE, { keyPath: 'id' });\n      }\n    };\n  });\n}\n\nexport function saveRoute(route) {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(STORE_NAME, 'readwrite');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.put(route);\n      \n      request.onerror = () => reject(\"Error saving route\");\n      request.onsuccess = () => resolve();\n    }).catch(reject);\n  });\n}\n\nexport function getRoute(id) {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(STORE_NAME, 'readonly');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.get(id);\n      \n      request.onerror = () => reject(\"Error getting route\");\n      request.onsuccess = () => resolve(request.result);\n    }).catch(reject);\n  });\n}\n\nexport function getRouteVersion(id) {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(STORE_NAME, 'readonly');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.get(id);\n      \n      request.onerror = () => reject(\"Error getting route version\");\n      request.onsuccess = () => resolve(request.result ? request.result.version : null);\n    }).catch(reject);\n  });\n}\n\nexport function saveCatalog(catalog) {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(CATALOG_STORE, 'readwrite');\n      const store = transaction.objectStore(CATALOG_STORE);\n      const request = store.put({ id: 'main', data: catalog });\n      \n      request.onerror = () => reject(\"Error saving catalog\");\n      request.onsuccess = () => resolve();\n    }).catch(reject);\n  });\n}\n\nexport function getCatalog() {\n  return new Promise((resolve, reject) => {\n    openDB().then(db => {\n      const transaction = db.transaction(CATALOG_STORE, 'readonly');\n      const store = transaction.objectStore(CATALOG_STORE);\n      const request = store.get('main');\n      \n      request.onerror = () => reject(\"Error getting catalog\");\n      request.onsuccess = () => resolve(request.result ? request.result.data : null);\n    }).catch(reject);\n  });\n}"],"names":["routes","setRoutes","useState","error","setError","isOffline","setIsOffline","navigator","onLine","useEffect","handleOnline","handleOffline","window","addEventListener","removeEventListener","async","catalog","getCatalog","response","fetch","concat","process","json","saveCatalog","console","loadCatalog","_jsxs","children","_jsx","length","map","route","Link","to","id","name","shortDescription","DB_NAME","STORE_NAME","CATALOG_STORE","openDB","Promise","resolve","reject","request","indexedDB","open","onerror","event","target","onsuccess","result","onupgradeneeded","db","objectStoreNames","contains","createObjectStore","keyPath","createIndex","unique","saveRoute","then","transaction","objectStore","put","catch","getRoute","get","getRouteVersion","version","data"],"sourceRoot":""}